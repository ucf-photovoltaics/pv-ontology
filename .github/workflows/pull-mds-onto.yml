name: Pull Latest MDS-Onto from Bitbucket

on:
  schedule:
    # Runs daily at 01:00 UTC. Adjust the cron expression as needed.
    # For example, '0 0 * * *' for midnight UTC, or '0 */6 * * *' for every 6 hours.
    - cron: '0 1 * * *'
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab

jobs:
  download_and_commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This token is crucial for pushing changes back to the repository
          token: ${{ secrets.GH_PAT }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use the latest stable Python 3 version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 PyGithub packaging

      - name: Run script to pull latest MDS-Onto
        run: python scripts/pull_mds_onto_latest.py
        env:
          GH_PAT: ${{ secrets.GH_PAT }} # Pass the GitHub PAT to the Python script as an environment variable

      # --- CRUCIAL: Configure Git and Pull again before final push to handle race conditions ---
      # This step handles potential updates on the remote repository that occurred after checkout
      # but before this workflow attempts to push.
      - name: Configure Git and Pull before Push
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main # Or master, or your TARGET_BRANCH if it's not 'main'
        env:
          # Ensure the token is available for the git pull if the repo is private
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Check for changes and Push
        id: push_changes # Add an ID to the step if you want to reference it later
        run: |
          # This check verifies if there are any changes (from the Python script)
          # that need to be pushed after the rebase operation.
          # The Python script has already done `git add` and `git commit`.
          # We just need to check if that commit is now ahead of the remote and needs pushing.
          if ! git diff --quiet HEAD^ HEAD; then # Check if HEAD is different from its parent (i.e., a commit was made)
             echo "Commit was made by Python script. Pushing..."
             git push
          else
             echo "No new commit detected from script or already pushed. Skipping push."
          fi
        env:
          # Ensure the token is available for the git push operation
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
